# Урок 7 задание 3
# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.


class Cell:
    def __init__(self, cell_count: int):
        self.cell_count = cell_count

    def __add__(self, other):
        return Cell(self.cell_count + other.cell_count)

    def __sub__(self, other):
        if self.cell_count > other.cell_count:
            return Cell(self.cell_count - other.cell_count)
        else:
            print("Can't substract {} from {}".format(other.cell_count, self.cell_count))

    def __mul__(self, other):
        return Cell(self.cell_count * other.cell_count)

    def __truediv__(self, other):
        if other.cell_count > 0:
            return Cell(self.cell_count // other.cell_count)

    def __str__(self):
        return str("Cell count : {}".format(self.cell_count))

    def make_order(self, c, count: int):
        s = ""
        item_in_row = c.cell_count // count
        ostatok = c.cell_count % count
        for i in range(0,item_in_row):
            for j in range(0,count):
                s += "*"
            s += "\n"
        for i in range(0,ostatok):
            s += "*"
        return s



if __name__ == '__main__':
    c1 = Cell(5)
    c2 = Cell(10)
    c3 = c1 + c2
    c4 = c2 - c1
    c5 = c1 * c2
    c6 = c2 / c1
    print(c1)
    print(c2)
    print(c3)
    print(c4)
    print(c5)
    print(c6)
    print(c6.make_order(c2, 3))
